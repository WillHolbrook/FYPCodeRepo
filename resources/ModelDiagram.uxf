<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="15.0.0">
  <help_text>// Uncomment the following line to change the fontsize and font:
fontsize=14
// fontfamily=SansSerif //possible: SansSerif,Serif,Monospaced


//////////////////////////////////////////////////////////////////////////////////////////////
// Welcome to UMLet!
//
// Double-click on elements to add them to the diagram, or to copy them
// Edit elements by modifying the text in this panel
// Hold Ctrl to select multiple elements
// Use Ctrl+mouse to select via lasso
//
// Use +/- or Ctrl+mouse wheel to zoom
// Drag a whole relation at its central square icon
//
// Press Ctrl+C to copy the whole diagram to the system clipboard (then just paste it to, eg, Word)
// Edit the files in the "palettes" directory to create your own element palettes
//
// Select "Custom Elements &gt; New..." to create new element types
//////////////////////////////////////////////////////////////////////////////////////////////


// This text will be stored with each diagram;  use it for notes.</help_text>
  <zoom_level>12</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>648</x>
      <y>0</y>
      <w>468</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>Default Django User Model
--
Usename: String
Password: String
--
Create: Creates a new user and an associated profile
Delete: Removes the User and the associated profile</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>648</x>
      <y>216</y>
      <w>468</w>
      <h>228</h>
    </coordinates>
    <panel_attributes>Profile Model
--
User: User - User that uploaded the file must be present
APIKey1: String - Randomized token used for API Access
APIKey2: String - Randomized token used for API Access
ProfileImage: Img - Image used to represent a user
--
Create: Generates a profile for a given user with two APIKeys
--
RegenKey1: Regenerates Key1 with a new value
    and invalidates the old value
RegenKey2: Regenerates Key2 with a new value
    and invalidates the old value
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>864</x>
      <y>108</y>
      <w>48</w>
      <h>132</h>
    </coordinates>
    <panel_attributes>lt=-
m1=1
m2=1
</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1248</x>
      <y>0</y>
      <w>492</w>
      <h>420</h>
    </coordinates>
    <panel_attributes>File Model
--
TEIXML: String - File generated from Grobid Server
UploadDateTime: DateTime - Time representing when the file was uploaded
FilePlaintext: String - Text extracted from the TEIXML Field
CorpusFlag: Bool - Flag to represent whether the file is used
    as part of the corpus or a users file upload
InIDFlag: Bool - Flag to say if this file is used in the
    calculation of the current IDF and is used to speedup
    re-calculating IDF
PlaintexDateTime: DateTime - Time representing when the
    plaintext was extracted
SentenceDateTime: DateTime - Time representing when the
    sentences were last extracted
User: User - User that uploaded the file can be null
--
Create: Creates a File model from an uploaded blob
Delete: File and associated sentences</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>0</y>
      <w>600</w>
      <h>1248</h>
    </coordinates>
    <panel_attributes>API Interface
--
\/ CRUDUser: CRUD user and associated profile.
RegenKey1: Regenerates Key1 with a new value
    and invalidates the old value
RegenKey2: Regenerates Key2 with a new value
    and invalidates the old value
\/ CRUDProfileImage: CRUD profile image
--
\/ UploadFile: Uploads a new analyst report and processes the file
    extracting the relevant information and sentences.
\/ ReProcessFile: Runs the new updated algorithm on a specific File object
    to generate the new plaintext from the already extracted TEIXML.
ReProcessAll: Calling this is equivalent to calling ReProcessFile on
	every stored File object
\/ ExtractSentenceTFIDF: ReExtracts sentences from a specific File object
    and calculates the TFIDF for each extracted sentence then returns
    the sentences in a paged manner like get sentence so this would
    return the first page and then for subsequent pages GetSentenceTFIDF
    should be called.
\/ GetSentenceTFIDF: Returns the different sentences in a given document
    paged so not all sentences are returned at once and allows you to
    order in ascending or descending order of TF-IDF weight
ExtractAllSentenceTFIDF: calls ExtractSentenceTFIDF on every file
    associated with a user to get new sentences through a new method
    but doesn't return any of the extracted sentences
\/ AddToCorpus: Adds a file previously uploaded by a user to the corpus
\/ CalculateIDF: ReCalculates the IDF of every term in corpus from the
    extracted file plaintext.
    (The corpus is decided by which files are flagged as in the corpus)
    This has a flag to specify whetherto recalculate IDF using the
    plaintet from every doc in the corpus or just by adding the TF from
    Files without the InIDFFlag set (this then updates the flag)
\/ RemoveFile: Command to remove File from application storage


This makes it so you can upload a file and flag it to be part of the corpus.
When you upload a file it automatically gets processed through the GROBID
server to get the TEIXML of the server. This is because updates to the
GROBID server will be infrequent and the TEIXML generated will only differ
by small ammounts. This also avoids storage of the .pdf files which in itself
will be expensive.

Once a file is uploaded and the TEIXML is generated the plaintext will be
extracted and stored in the plaintext.

Then one of two things cases can occur:
1. This is a users file that wants summaries extracted from. In this case
    the ExtractSentenceTFIDF method would be called to extract the
    sentences that will be used as summaries from the document. Then
    these would be given back to the frontend to be visualized.

    If in the future a user wanted to have the same file analized again but
    with a newver version of the algorithm ExtractSentenceTFIDF could be
    called again othervise if the results just wanted to be viewed again they
    could be retrived from the server.
2. This is a file to be added to the corpus. In this case you upload all of
    the files to be added to the corpus (either by uploading them with the
    corpus flag set or by calling AddToCorpus on an already uploaded file)
    at this time and then call CalculateIDF to recalculate the IDF with the
    new files included in the corpus

At any time if a file wants to be recalculated to extract text with a new updated
algorithm ReProcessFile can be called


</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1248</x>
      <y>528</y>
      <w>492</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>Sentence Model
--
File: File - The file that the sentence came from
Text: String - Text of a given sentence
TFIDFWeight: TF-IDF weight of a given sentence in a file
--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>648</x>
      <y>528</y>
      <w>468</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>TermIDF Model
--
Term: String - The Term that the IDF is calculated for
TF: Int - The term frequency (number of documents the
    term occurs in)
IDF: Float - The IDF of the specific term
--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1104</x>
      <y>36</y>
      <w>168</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=-
m1=0,1
m2=*
</panel_attributes>
    <additional_attributes>10.0;20.0;120.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1464</x>
      <y>408</y>
      <w>48</w>
      <h>144</h>
    </coordinates>
    <panel_attributes>lt=-
m1=1
m2=*
</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;100.0</additional_attributes>
  </element>
</diagram>
