name: python-workflow
run-name: python-workflow
on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]
jobs:
  python-ci:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip' # caching pip dependencies

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        mkdir artifacts
        
    - name: Lint with PyLint
      run: |
        pylint $(git ls-files -- '*.py' ':!:*/migrations/*' ':!:*/migrations/*' ':!:manage.py') --load-plugins=pylint_django --django-settings-module=analyst_report_summarizer.settings --disable=wrong-import-order --output-format=text:artifacts/lint_out.txt,colorized
    - name: Upload Lint Artifact
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: pylint_out
        path: backend/artifacts/lint_out.txt
    
    - name: Run Unit Tests
      if: always()
      run: |
        python -m coverage run manage.py test
    - name: Generate Coverage Report
      if: always()
      run: |
        coverage report
        coverage xml -o ./artifacts/coverage_report.xml
    - name: Upload Coverage Report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: coverage_report
        path: backend/artifacts/coverage_report.xml        
    - name: Code Coverage Report
      if: always()
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: backend/artifacts/coverage_report.xml
        badge: true
        format: markdown
        output: both
        
    - name: Add Coverage PR Comment
      if: always() && github.event_name == 'pull_request'
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        recreate: true
        path: code-coverage-results.md    
    
    - name: Run Django Security Tests
      if: always()
      run: |
        python manage.py check --deploy --fail-level ERROR
        
    - name: Build Docker Image
      working-directory: .
      env:
        DockerRegistry: https://registry.hub.docker.com
        RegistryImage: willholbrook
        ImageName: analyst_report_summarizer
      run: |
        echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login $DockerRegistry --username ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
        docker build --tag $RegistryImage/$ImageName --file="compose/backend/docker/Dockerfile.apache" .
        docker push $RegistryImage/$ImageName
        
